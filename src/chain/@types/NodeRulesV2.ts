/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace NodeRulesV2 {
  export type NodeDataStruct = {
    enodeHigh: BytesLike;
    enodeLow: BytesLike;
    nodeType: BigNumberish;
    name: string;
    orgId: BigNumberish;
    active: boolean;
  };

  export type NodeDataStructOutput = [
    enodeHigh: string,
    enodeLow: string,
    nodeType: bigint,
    name: string,
    orgId: bigint,
    active: boolean
  ] & {
    enodeHigh: string;
    enodeLow: string;
    nodeType: bigint;
    name: string;
    orgId: bigint;
    active: boolean;
  };
}

export interface NodeRulesV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLocalNode"
      | "addNode"
      | "connectionAllowed"
      | "deleteLocalNode"
      | "deleteNode"
      | "getNode"
      | "getNodes"
      | "getNodesByOrg"
      | "getNumberOfNodes"
      | "getNumberOfNodesByOrg"
      | "isNodeActive"
      | "updateLocalNode"
      | "updateLocalNodeStatus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NodeAdded"
      | "NodeDeleted"
      | "NodeStatusUpdated"
      | "NodeUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLocalNode",
    values: [BytesLike, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addNode",
    values: [BytesLike, BytesLike, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "connectionAllowed",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteLocalNode",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteNode",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNode",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodesByOrg",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfNodesByOrg",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNodeActive",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLocalNode",
    values: [BytesLike, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLocalNodeStatus",
    values: [BytesLike, BytesLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLocalNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "connectionAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteLocalNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNodes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNodesByOrg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfNodesByOrg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNodeActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLocalNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLocalNodeStatus",
    data: BytesLike
  ): Result;
}

export namespace NodeAddedEvent {
  export type InputTuple = [
    enodeHigh: BytesLike,
    enodeLow: BytesLike,
    orgId: BigNumberish,
    nodeType: BigNumberish,
    name: string
  ];
  export type OutputTuple = [
    enodeHigh: string,
    enodeLow: string,
    orgId: bigint,
    nodeType: bigint,
    name: string
  ];
  export interface OutputObject {
    enodeHigh: string;
    enodeLow: string;
    orgId: bigint;
    nodeType: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeDeletedEvent {
  export type InputTuple = [
    enodeHigh: BytesLike,
    enodeLow: BytesLike,
    orgId: BigNumberish
  ];
  export type OutputTuple = [
    enodeHigh: string,
    enodeLow: string,
    orgId: bigint
  ];
  export interface OutputObject {
    enodeHigh: string;
    enodeLow: string;
    orgId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeStatusUpdatedEvent {
  export type InputTuple = [
    enodeHigh: BytesLike,
    enodeLow: BytesLike,
    orgId: BigNumberish,
    active: boolean
  ];
  export type OutputTuple = [
    enodeHigh: string,
    enodeLow: string,
    orgId: bigint,
    active: boolean
  ];
  export interface OutputObject {
    enodeHigh: string;
    enodeLow: string;
    orgId: bigint;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeUpdatedEvent {
  export type InputTuple = [
    enodeHigh: BytesLike,
    enodeLow: BytesLike,
    orgId: BigNumberish,
    nodeType: BigNumberish,
    name: string
  ];
  export type OutputTuple = [
    enodeHigh: string,
    enodeLow: string,
    orgId: bigint,
    nodeType: bigint,
    name: string
  ];
  export interface OutputObject {
    enodeHigh: string;
    enodeLow: string;
    orgId: bigint;
    nodeType: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NodeRulesV2 extends BaseContract {
  connect(runner?: ContractRunner | null): NodeRulesV2;
  waitForDeployment(): Promise<this>;

  interface: NodeRulesV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLocalNode: TypedContractMethod<
    [
      enodeHigh: BytesLike,
      enodeLow: BytesLike,
      nodeType: BigNumberish,
      name: string
    ],
    [void],
    "nonpayable"
  >;

  addNode: TypedContractMethod<
    [
      enodeHigh: BytesLike,
      enodeLow: BytesLike,
      nodeType: BigNumberish,
      name: string,
      orgId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  connectionAllowed: TypedContractMethod<
    [
      sourceEnodeHigh: BytesLike,
      sourceEnodeLow: BytesLike,
      sourceEnodeIp: BytesLike,
      sourceEnodePort: BigNumberish,
      destinationEnodeHigh: BytesLike,
      destinationEnodeLow: BytesLike,
      destinationEnodeIp: BytesLike,
      destinationEnodePort: BigNumberish
    ],
    [string],
    "view"
  >;

  deleteLocalNode: TypedContractMethod<
    [enodeHigh: BytesLike, enodeLow: BytesLike],
    [void],
    "nonpayable"
  >;

  deleteNode: TypedContractMethod<
    [enodeHigh: BytesLike, enodeLow: BytesLike],
    [void],
    "nonpayable"
  >;

  getNode: TypedContractMethod<
    [enodeHigh: BytesLike, enodeLow: BytesLike],
    [NodeRulesV2.NodeDataStructOutput],
    "view"
  >;

  getNodes: TypedContractMethod<
    [pageNumber: BigNumberish, pageSize: BigNumberish],
    [NodeRulesV2.NodeDataStructOutput[]],
    "view"
  >;

  getNodesByOrg: TypedContractMethod<
    [orgId: BigNumberish, pageNumber: BigNumberish, pageSize: BigNumberish],
    [NodeRulesV2.NodeDataStructOutput[]],
    "view"
  >;

  getNumberOfNodes: TypedContractMethod<[], [bigint], "view">;

  getNumberOfNodesByOrg: TypedContractMethod<
    [orgId: BigNumberish],
    [bigint],
    "view"
  >;

  isNodeActive: TypedContractMethod<
    [enodeHigh: BytesLike, enodeLow: BytesLike],
    [boolean],
    "view"
  >;

  updateLocalNode: TypedContractMethod<
    [
      enodeHigh: BytesLike,
      enodeLow: BytesLike,
      nodeType: BigNumberish,
      name: string
    ],
    [void],
    "nonpayable"
  >;

  updateLocalNodeStatus: TypedContractMethod<
    [enodeHigh: BytesLike, enodeLow: BytesLike, active: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLocalNode"
  ): TypedContractMethod<
    [
      enodeHigh: BytesLike,
      enodeLow: BytesLike,
      nodeType: BigNumberish,
      name: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addNode"
  ): TypedContractMethod<
    [
      enodeHigh: BytesLike,
      enodeLow: BytesLike,
      nodeType: BigNumberish,
      name: string,
      orgId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "connectionAllowed"
  ): TypedContractMethod<
    [
      sourceEnodeHigh: BytesLike,
      sourceEnodeLow: BytesLike,
      sourceEnodeIp: BytesLike,
      sourceEnodePort: BigNumberish,
      destinationEnodeHigh: BytesLike,
      destinationEnodeLow: BytesLike,
      destinationEnodeIp: BytesLike,
      destinationEnodePort: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "deleteLocalNode"
  ): TypedContractMethod<
    [enodeHigh: BytesLike, enodeLow: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteNode"
  ): TypedContractMethod<
    [enodeHigh: BytesLike, enodeLow: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getNode"
  ): TypedContractMethod<
    [enodeHigh: BytesLike, enodeLow: BytesLike],
    [NodeRulesV2.NodeDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNodes"
  ): TypedContractMethod<
    [pageNumber: BigNumberish, pageSize: BigNumberish],
    [NodeRulesV2.NodeDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNodesByOrg"
  ): TypedContractMethod<
    [orgId: BigNumberish, pageNumber: BigNumberish, pageSize: BigNumberish],
    [NodeRulesV2.NodeDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNumberOfNodes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfNodesByOrg"
  ): TypedContractMethod<[orgId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isNodeActive"
  ): TypedContractMethod<
    [enodeHigh: BytesLike, enodeLow: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateLocalNode"
  ): TypedContractMethod<
    [
      enodeHigh: BytesLike,
      enodeLow: BytesLike,
      nodeType: BigNumberish,
      name: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateLocalNodeStatus"
  ): TypedContractMethod<
    [enodeHigh: BytesLike, enodeLow: BytesLike, active: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NodeAdded"
  ): TypedContractEvent<
    NodeAddedEvent.InputTuple,
    NodeAddedEvent.OutputTuple,
    NodeAddedEvent.OutputObject
  >;
  getEvent(
    key: "NodeDeleted"
  ): TypedContractEvent<
    NodeDeletedEvent.InputTuple,
    NodeDeletedEvent.OutputTuple,
    NodeDeletedEvent.OutputObject
  >;
  getEvent(
    key: "NodeStatusUpdated"
  ): TypedContractEvent<
    NodeStatusUpdatedEvent.InputTuple,
    NodeStatusUpdatedEvent.OutputTuple,
    NodeStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NodeUpdated"
  ): TypedContractEvent<
    NodeUpdatedEvent.InputTuple,
    NodeUpdatedEvent.OutputTuple,
    NodeUpdatedEvent.OutputObject
  >;

  filters: {
    "NodeAdded(bytes32,bytes32,uint256,uint8,string)": TypedContractEvent<
      NodeAddedEvent.InputTuple,
      NodeAddedEvent.OutputTuple,
      NodeAddedEvent.OutputObject
    >;
    NodeAdded: TypedContractEvent<
      NodeAddedEvent.InputTuple,
      NodeAddedEvent.OutputTuple,
      NodeAddedEvent.OutputObject
    >;

    "NodeDeleted(bytes32,bytes32,uint256)": TypedContractEvent<
      NodeDeletedEvent.InputTuple,
      NodeDeletedEvent.OutputTuple,
      NodeDeletedEvent.OutputObject
    >;
    NodeDeleted: TypedContractEvent<
      NodeDeletedEvent.InputTuple,
      NodeDeletedEvent.OutputTuple,
      NodeDeletedEvent.OutputObject
    >;

    "NodeStatusUpdated(bytes32,bytes32,uint256,bool)": TypedContractEvent<
      NodeStatusUpdatedEvent.InputTuple,
      NodeStatusUpdatedEvent.OutputTuple,
      NodeStatusUpdatedEvent.OutputObject
    >;
    NodeStatusUpdated: TypedContractEvent<
      NodeStatusUpdatedEvent.InputTuple,
      NodeStatusUpdatedEvent.OutputTuple,
      NodeStatusUpdatedEvent.OutputObject
    >;

    "NodeUpdated(bytes32,bytes32,uint256,uint8,string)": TypedContractEvent<
      NodeUpdatedEvent.InputTuple,
      NodeUpdatedEvent.OutputTuple,
      NodeUpdatedEvent.OutputObject
    >;
    NodeUpdated: TypedContractEvent<
      NodeUpdatedEvent.InputTuple,
      NodeUpdatedEvent.OutputTuple,
      NodeUpdatedEvent.OutputObject
    >;
  };
}
