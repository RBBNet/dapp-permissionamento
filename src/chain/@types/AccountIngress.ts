/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AccountIngressInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_CONTRACT"
      | "RULES_CONTRACT"
      | "getAllContractKeys"
      | "getContractAddress"
      | "getContractVersion"
      | "getSize"
      | "isAuthorized"
      | "removeContract"
      | "setContractAddress"
      | "transactionAllowed"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RegistryUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RULES_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllContractKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeContract",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionAllowed",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADMIN_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RULES_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllContractKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionAllowed",
    data: BytesLike
  ): Result;
}

export namespace RegistryUpdatedEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    contractName: BytesLike
  ];
  export type OutputTuple = [contractAddress: string, contractName: string];
  export interface OutputObject {
    contractAddress: string;
    contractName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccountIngress extends BaseContract {
  connect(runner?: ContractRunner | null): AccountIngress;
  waitForDeployment(): Promise<this>;

  interface: AccountIngressInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_CONTRACT: TypedContractMethod<[], [string], "view">;

  RULES_CONTRACT: TypedContractMethod<[], [string], "view">;

  getAllContractKeys: TypedContractMethod<[], [string[]], "view">;

  getContractAddress: TypedContractMethod<[name: BytesLike], [string], "view">;

  getContractVersion: TypedContractMethod<[], [bigint], "view">;

  getSize: TypedContractMethod<[], [bigint], "view">;

  isAuthorized: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  removeContract: TypedContractMethod<
    [_name: BytesLike],
    [boolean],
    "nonpayable"
  >;

  setContractAddress: TypedContractMethod<
    [name: BytesLike, addr: AddressLike],
    [boolean],
    "nonpayable"
  >;

  transactionAllowed: TypedContractMethod<
    [
      sender: AddressLike,
      target: AddressLike,
      value: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      payload: BytesLike
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_CONTRACT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "RULES_CONTRACT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllContractKeys"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContractAddress"
  ): TypedContractMethod<[name: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getContractVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAuthorized"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeContract"
  ): TypedContractMethod<[_name: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setContractAddress"
  ): TypedContractMethod<
    [name: BytesLike, addr: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transactionAllowed"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      target: AddressLike,
      value: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      payload: BytesLike
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "RegistryUpdated"
  ): TypedContractEvent<
    RegistryUpdatedEvent.InputTuple,
    RegistryUpdatedEvent.OutputTuple,
    RegistryUpdatedEvent.OutputObject
  >;

  filters: {
    "RegistryUpdated(address,bytes32)": TypedContractEvent<
      RegistryUpdatedEvent.InputTuple,
      RegistryUpdatedEvent.OutputTuple,
      RegistryUpdatedEvent.OutputObject
    >;
    RegistryUpdated: TypedContractEvent<
      RegistryUpdatedEvent.InputTuple,
      RegistryUpdatedEvent.OutputTuple,
      RegistryUpdatedEvent.OutputObject
    >;
  };
}
