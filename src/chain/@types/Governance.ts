/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Governance {
  export type ProposalDataStruct = {
    id: BigNumberish;
    creator: AddressLike;
    targets: AddressLike[];
    calldatas: BytesLike[];
    blocksDuration: BigNumberish;
    description: string;
    creationBlock: BigNumberish;
    status: BigNumberish;
    result: BigNumberish;
    organizations: BigNumberish[];
    cancelationReason: string;
  };

  export type ProposalDataStructOutput = [
    id: bigint,
    creator: string,
    targets: string[],
    calldatas: string[],
    blocksDuration: bigint,
    description: string,
    creationBlock: bigint,
    status: bigint,
    result: bigint,
    organizations: bigint[],
    cancelationReason: string
  ] & {
    id: bigint;
    creator: string;
    targets: string[];
    calldatas: string[];
    blocksDuration: bigint;
    description: string;
    creationBlock: bigint;
    status: bigint;
    result: bigint;
    organizations: bigint[];
    cancelationReason: string;
  };
}

export interface GovernanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accounts"
      | "cancelProposal"
      | "castVote"
      | "createProposal"
      | "executeProposal"
      | "getProposal"
      | "getVotes"
      | "idSeed"
      | "organizations"
      | "proposals"
      | "votes"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OrganizationVoted"
      | "ProposalApproved"
      | "ProposalCanceled"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "ProposalFinished"
      | "ProposalRejected"
  ): EventFragment;

  encodeFunctionData(functionFragment: "accounts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [AddressLike[], BytesLike[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "idSeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "organizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idSeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "organizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
}

export namespace OrganizationVotedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    admin: AddressLike,
    approve: boolean
  ];
  export type OutputTuple = [
    proposalId: bigint,
    admin: string,
    approve: boolean
  ];
  export interface OutputObject {
    proposalId: bigint;
    admin: string;
    approve: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalApprovedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCanceledEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [proposalId: BigNumberish, creator: AddressLike];
  export type OutputTuple = [proposalId: bigint, creator: string];
  export interface OutputObject {
    proposalId: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish, executor: AddressLike];
  export type OutputTuple = [proposalId: bigint, executor: string];
  export interface OutputObject {
    proposalId: bigint;
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalFinishedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalRejectedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Governance extends BaseContract {
  connect(runner?: ContractRunner | null): Governance;
  waitForDeployment(): Promise<this>;

  interface: GovernanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accounts: TypedContractMethod<[], [string], "view">;

  cancelProposal: TypedContractMethod<
    [proposalId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  castVote: TypedContractMethod<
    [proposalId: BigNumberish, approve: boolean],
    [boolean],
    "nonpayable"
  >;

  createProposal: TypedContractMethod<
    [
      targets: AddressLike[],
      calldatas: BytesLike[],
      blocksDuration: BigNumberish,
      description: string
    ],
    [bigint],
    "nonpayable"
  >;

  executeProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [string[]],
    "nonpayable"
  >;

  getProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [Governance.ProposalDataStructOutput],
    "view"
  >;

  getVotes: TypedContractMethod<[proposalId: BigNumberish], [bigint[]], "view">;

  idSeed: TypedContractMethod<[], [bigint], "view">;

  organizations: TypedContractMethod<[], [string], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, bigint, bigint, string] & {
        id: bigint;
        creator: string;
        blocksDuration: bigint;
        description: string;
        creationBlock: bigint;
        status: bigint;
        result: bigint;
        cancelationReason: string;
      }
    ],
    "view"
  >;

  votes: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accounts"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, approve: boolean],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      calldatas: BytesLike[],
      blocksDuration: BigNumberish,
      description: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [Governance.ProposalDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "idSeed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "organizations"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, bigint, bigint, string] & {
        id: bigint;
        creator: string;
        blocksDuration: bigint;
        description: string;
        creationBlock: bigint;
        status: bigint;
        result: bigint;
        cancelationReason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "OrganizationVoted"
  ): TypedContractEvent<
    OrganizationVotedEvent.InputTuple,
    OrganizationVotedEvent.OutputTuple,
    OrganizationVotedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalApproved"
  ): TypedContractEvent<
    ProposalApprovedEvent.InputTuple,
    ProposalApprovedEvent.OutputTuple,
    ProposalApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCanceled"
  ): TypedContractEvent<
    ProposalCanceledEvent.InputTuple,
    ProposalCanceledEvent.OutputTuple,
    ProposalCanceledEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalFinished"
  ): TypedContractEvent<
    ProposalFinishedEvent.InputTuple,
    ProposalFinishedEvent.OutputTuple,
    ProposalFinishedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalRejected"
  ): TypedContractEvent<
    ProposalRejectedEvent.InputTuple,
    ProposalRejectedEvent.OutputTuple,
    ProposalRejectedEvent.OutputObject
  >;

  filters: {
    "OrganizationVoted(uint256,address,bool)": TypedContractEvent<
      OrganizationVotedEvent.InputTuple,
      OrganizationVotedEvent.OutputTuple,
      OrganizationVotedEvent.OutputObject
    >;
    OrganizationVoted: TypedContractEvent<
      OrganizationVotedEvent.InputTuple,
      OrganizationVotedEvent.OutputTuple,
      OrganizationVotedEvent.OutputObject
    >;

    "ProposalApproved(uint256)": TypedContractEvent<
      ProposalApprovedEvent.InputTuple,
      ProposalApprovedEvent.OutputTuple,
      ProposalApprovedEvent.OutputObject
    >;
    ProposalApproved: TypedContractEvent<
      ProposalApprovedEvent.InputTuple,
      ProposalApprovedEvent.OutputTuple,
      ProposalApprovedEvent.OutputObject
    >;

    "ProposalCanceled(uint256)": TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;
    ProposalCanceled: TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;

    "ProposalCreated(uint256,address)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256,address)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "ProposalFinished(uint256)": TypedContractEvent<
      ProposalFinishedEvent.InputTuple,
      ProposalFinishedEvent.OutputTuple,
      ProposalFinishedEvent.OutputObject
    >;
    ProposalFinished: TypedContractEvent<
      ProposalFinishedEvent.InputTuple,
      ProposalFinishedEvent.OutputTuple,
      ProposalFinishedEvent.OutputObject
    >;

    "ProposalRejected(uint256)": TypedContractEvent<
      ProposalRejectedEvent.InputTuple,
      ProposalRejectedEvent.OutputTuple,
      ProposalRejectedEvent.OutputObject
    >;
    ProposalRejected: TypedContractEvent<
      ProposalRejectedEvent.InputTuple,
      ProposalRejectedEvent.OutputTuple,
      ProposalRejectedEvent.OutputObject
    >;
  };
}
