/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace AccountRulesV2 {
  export type AccountDataStruct = {
    orgId: BigNumberish;
    account: AddressLike;
    roleId: BytesLike;
    dataHash: BytesLike;
    active: boolean;
  };

  export type AccountDataStructOutput = [
    orgId: bigint,
    account: string,
    roleId: string,
    dataHash: string,
    active: boolean
  ] & {
    orgId: bigint;
    account: string;
    roleId: string;
    dataHash: string;
    active: boolean;
  };
}

export interface AccountRulesV2ImplInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "accounts"
      | "addAccount"
      | "addLocalAccount"
      | "admins"
      | "deleteAccount"
      | "deleteLocalAccount"
      | "getAccount"
      | "getAccounts"
      | "getAccountsByOrg"
      | "getNumberOfAccounts"
      | "getNumberOfAccountsByOrg"
      | "getRoleAdmin"
      | "globalAdminsCount"
      | "grantRole"
      | "hasRole"
      | "isAccountActive"
      | "organizations"
      | "renounceRole"
      | "restrictedAccounts"
      | "restrictedAccountsAllowedTargets"
      | "restrictedSmartContracts"
      | "restrictedSmartContractsAllowedSenders"
      | "revokeRole"
      | "setAccountTargetAccess"
      | "setSmartContractSenderAccess"
      | "supportsInterface"
      | "transactionAllowed"
      | "updateLocalAccount"
      | "updateLocalAccountStatus"
      | "validRoles"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountAdded"
      | "AccountDeleted"
      | "AccountStatusUpdated"
      | "AccountTargetAccessUpdated"
      | "AccountUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SmartContractSenderAccessUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addAccount",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addLocalAccount",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "admins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleteAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteLocalAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccounts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountsByOrg",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfAccountsByOrg",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalAdminsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "organizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "restrictedAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictedAccountsAllowedTargets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "restrictedSmartContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictedSmartContractsAllowedSenders",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountTargetAccess",
    values: [AddressLike, boolean, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSmartContractSenderAccess",
    values: [AddressLike, boolean, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionAllowed",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLocalAccount",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLocalAccountStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validRoles",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLocalAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteLocalAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountsByOrg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfAccountsByOrg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalAdminsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAccountActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictedAccountsAllowedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictedSmartContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictedSmartContractsAllowedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccountTargetAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSmartContractSenderAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLocalAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLocalAccountStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validRoles", data: BytesLike): Result;
}

export namespace AccountAddedEvent {
  export type InputTuple = [
    account: AddressLike,
    orgId: BigNumberish,
    roleId: BytesLike,
    dataHash: BytesLike,
    admin: AddressLike
  ];
  export type OutputTuple = [
    account: string,
    orgId: bigint,
    roleId: string,
    dataHash: string,
    admin: string
  ];
  export interface OutputObject {
    account: string;
    orgId: bigint;
    roleId: string;
    dataHash: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountDeletedEvent {
  export type InputTuple = [
    account: AddressLike,
    orgId: BigNumberish,
    admin: AddressLike
  ];
  export type OutputTuple = [account: string, orgId: bigint, admin: string];
  export interface OutputObject {
    account: string;
    orgId: bigint;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountStatusUpdatedEvent {
  export type InputTuple = [
    account: AddressLike,
    orgId: BigNumberish,
    active: boolean,
    admin: AddressLike
  ];
  export type OutputTuple = [
    account: string,
    orgId: bigint,
    active: boolean,
    admin: string
  ];
  export interface OutputObject {
    account: string;
    orgId: bigint;
    active: boolean;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountTargetAccessUpdatedEvent {
  export type InputTuple = [
    account: AddressLike,
    restricted: boolean,
    allowedTargets: AddressLike[],
    admin: AddressLike
  ];
  export type OutputTuple = [
    account: string,
    restricted: boolean,
    allowedTargets: string[],
    admin: string
  ];
  export interface OutputObject {
    account: string;
    restricted: boolean;
    allowedTargets: string[];
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountUpdatedEvent {
  export type InputTuple = [
    account: AddressLike,
    orgId: BigNumberish,
    roleId: BytesLike,
    dataHash: BytesLike,
    admin: AddressLike
  ];
  export type OutputTuple = [
    account: string,
    orgId: bigint,
    roleId: string,
    dataHash: string,
    admin: string
  ];
  export interface OutputObject {
    account: string;
    orgId: bigint;
    roleId: string;
    dataHash: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SmartContractSenderAccessUpdatedEvent {
  export type InputTuple = [
    smartContract: AddressLike,
    restricted: boolean,
    allowedSenders: AddressLike[],
    admin: AddressLike
  ];
  export type OutputTuple = [
    smartContract: string,
    restricted: boolean,
    allowedSenders: string[],
    admin: string
  ];
  export interface OutputObject {
    smartContract: string;
    restricted: boolean;
    allowedSenders: string[];
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccountRulesV2Impl extends BaseContract {
  connect(runner?: ContractRunner | null): AccountRulesV2Impl;
  waitForDeployment(): Promise<this>;

  interface: AccountRulesV2ImplInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  accounts: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, string, string, string, boolean] & {
        orgId: bigint;
        account: string;
        roleId: string;
        dataHash: string;
        active: boolean;
      }
    ],
    "view"
  >;

  addAccount: TypedContractMethod<
    [
      account: AddressLike,
      orgId: BigNumberish,
      roleId: BytesLike,
      dataHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  addLocalAccount: TypedContractMethod<
    [account: AddressLike, roleId: BytesLike, dataHash: BytesLike],
    [void],
    "nonpayable"
  >;

  admins: TypedContractMethod<[], [string], "view">;

  deleteAccount: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  deleteLocalAccount: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  getAccount: TypedContractMethod<
    [account: AddressLike],
    [AccountRulesV2.AccountDataStructOutput],
    "view"
  >;

  getAccounts: TypedContractMethod<
    [page: BigNumberish, pageSize: BigNumberish],
    [AccountRulesV2.AccountDataStructOutput[]],
    "view"
  >;

  getAccountsByOrg: TypedContractMethod<
    [orgId: BigNumberish, page: BigNumberish, pageSize: BigNumberish],
    [AccountRulesV2.AccountDataStructOutput[]],
    "view"
  >;

  getNumberOfAccounts: TypedContractMethod<[], [bigint], "view">;

  getNumberOfAccountsByOrg: TypedContractMethod<
    [orgId: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  globalAdminsCount: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isAccountActive: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  organizations: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  restrictedAccounts: TypedContractMethod<[], [string[]], "view">;

  restrictedAccountsAllowedTargets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  restrictedSmartContracts: TypedContractMethod<[], [string[]], "view">;

  restrictedSmartContractsAllowedSenders: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAccountTargetAccess: TypedContractMethod<
    [account: AddressLike, restricted: boolean, allowedTargets: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setSmartContractSenderAccess: TypedContractMethod<
    [
      smartContract: AddressLike,
      restricted: boolean,
      allowedSenders: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transactionAllowed: TypedContractMethod<
    [
      sender: AddressLike,
      target: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [boolean],
    "view"
  >;

  updateLocalAccount: TypedContractMethod<
    [account: AddressLike, roleId: BytesLike, dataHash: BytesLike],
    [void],
    "nonpayable"
  >;

  updateLocalAccountStatus: TypedContractMethod<
    [account: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  validRoles: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accounts"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, string, string, string, boolean] & {
        orgId: bigint;
        account: string;
        roleId: string;
        dataHash: string;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addAccount"
  ): TypedContractMethod<
    [
      account: AddressLike,
      orgId: BigNumberish,
      roleId: BytesLike,
      dataHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLocalAccount"
  ): TypedContractMethod<
    [account: AddressLike, roleId: BytesLike, dataHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deleteAccount"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteLocalAccount"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAccount"
  ): TypedContractMethod<
    [account: AddressLike],
    [AccountRulesV2.AccountDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccounts"
  ): TypedContractMethod<
    [page: BigNumberish, pageSize: BigNumberish],
    [AccountRulesV2.AccountDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountsByOrg"
  ): TypedContractMethod<
    [orgId: BigNumberish, page: BigNumberish, pageSize: BigNumberish],
    [AccountRulesV2.AccountDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNumberOfAccounts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfAccountsByOrg"
  ): TypedContractMethod<[orgId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "globalAdminsCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAccountActive"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "organizations"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "restrictedAccounts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "restrictedAccountsAllowedTargets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "restrictedSmartContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "restrictedSmartContractsAllowedSenders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAccountTargetAccess"
  ): TypedContractMethod<
    [account: AddressLike, restricted: boolean, allowedTargets: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSmartContractSenderAccess"
  ): TypedContractMethod<
    [
      smartContract: AddressLike,
      restricted: boolean,
      allowedSenders: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transactionAllowed"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      target: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateLocalAccount"
  ): TypedContractMethod<
    [account: AddressLike, roleId: BytesLike, dataHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateLocalAccountStatus"
  ): TypedContractMethod<
    [account: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validRoles"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getEvent(
    key: "AccountAdded"
  ): TypedContractEvent<
    AccountAddedEvent.InputTuple,
    AccountAddedEvent.OutputTuple,
    AccountAddedEvent.OutputObject
  >;
  getEvent(
    key: "AccountDeleted"
  ): TypedContractEvent<
    AccountDeletedEvent.InputTuple,
    AccountDeletedEvent.OutputTuple,
    AccountDeletedEvent.OutputObject
  >;
  getEvent(
    key: "AccountStatusUpdated"
  ): TypedContractEvent<
    AccountStatusUpdatedEvent.InputTuple,
    AccountStatusUpdatedEvent.OutputTuple,
    AccountStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AccountTargetAccessUpdated"
  ): TypedContractEvent<
    AccountTargetAccessUpdatedEvent.InputTuple,
    AccountTargetAccessUpdatedEvent.OutputTuple,
    AccountTargetAccessUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AccountUpdated"
  ): TypedContractEvent<
    AccountUpdatedEvent.InputTuple,
    AccountUpdatedEvent.OutputTuple,
    AccountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SmartContractSenderAccessUpdated"
  ): TypedContractEvent<
    SmartContractSenderAccessUpdatedEvent.InputTuple,
    SmartContractSenderAccessUpdatedEvent.OutputTuple,
    SmartContractSenderAccessUpdatedEvent.OutputObject
  >;

  filters: {
    "AccountAdded(address,uint256,bytes32,bytes32,address)": TypedContractEvent<
      AccountAddedEvent.InputTuple,
      AccountAddedEvent.OutputTuple,
      AccountAddedEvent.OutputObject
    >;
    AccountAdded: TypedContractEvent<
      AccountAddedEvent.InputTuple,
      AccountAddedEvent.OutputTuple,
      AccountAddedEvent.OutputObject
    >;

    "AccountDeleted(address,uint256,address)": TypedContractEvent<
      AccountDeletedEvent.InputTuple,
      AccountDeletedEvent.OutputTuple,
      AccountDeletedEvent.OutputObject
    >;
    AccountDeleted: TypedContractEvent<
      AccountDeletedEvent.InputTuple,
      AccountDeletedEvent.OutputTuple,
      AccountDeletedEvent.OutputObject
    >;

    "AccountStatusUpdated(address,uint256,bool,address)": TypedContractEvent<
      AccountStatusUpdatedEvent.InputTuple,
      AccountStatusUpdatedEvent.OutputTuple,
      AccountStatusUpdatedEvent.OutputObject
    >;
    AccountStatusUpdated: TypedContractEvent<
      AccountStatusUpdatedEvent.InputTuple,
      AccountStatusUpdatedEvent.OutputTuple,
      AccountStatusUpdatedEvent.OutputObject
    >;

    "AccountTargetAccessUpdated(address,bool,address[],address)": TypedContractEvent<
      AccountTargetAccessUpdatedEvent.InputTuple,
      AccountTargetAccessUpdatedEvent.OutputTuple,
      AccountTargetAccessUpdatedEvent.OutputObject
    >;
    AccountTargetAccessUpdated: TypedContractEvent<
      AccountTargetAccessUpdatedEvent.InputTuple,
      AccountTargetAccessUpdatedEvent.OutputTuple,
      AccountTargetAccessUpdatedEvent.OutputObject
    >;

    "AccountUpdated(address,uint256,bytes32,bytes32,address)": TypedContractEvent<
      AccountUpdatedEvent.InputTuple,
      AccountUpdatedEvent.OutputTuple,
      AccountUpdatedEvent.OutputObject
    >;
    AccountUpdated: TypedContractEvent<
      AccountUpdatedEvent.InputTuple,
      AccountUpdatedEvent.OutputTuple,
      AccountUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SmartContractSenderAccessUpdated(address,bool,address[],address)": TypedContractEvent<
      SmartContractSenderAccessUpdatedEvent.InputTuple,
      SmartContractSenderAccessUpdatedEvent.OutputTuple,
      SmartContractSenderAccessUpdatedEvent.OutputObject
    >;
    SmartContractSenderAccessUpdated: TypedContractEvent<
      SmartContractSenderAccessUpdatedEvent.InputTuple,
      SmartContractSenderAccessUpdatedEvent.OutputTuple,
      SmartContractSenderAccessUpdatedEvent.OutputObject
    >;
  };
}
