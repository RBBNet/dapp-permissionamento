/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Organization {
  export type OrganizationDataStruct = {
    id: BigNumberish;
    name: string;
    canVote: boolean;
  };

  export type OrganizationDataStructOutput = [
    id: bigint,
    name: string,
    canVote: boolean
  ] & { id: bigint; name: string; canVote: boolean };
}

export interface OrganizationImplInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addOrganization"
      | "admins"
      | "deleteOrganization"
      | "getOrganization"
      | "getOrganizations"
      | "idSeed"
      | "isOrganizationActive"
      | "organizationIds"
      | "organizations"
      | "updateOrganization"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OrganizationAdded"
      | "OrganizationDeleted"
      | "OrganizationUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addOrganization",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "admins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleteOrganization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "idSeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOrganizationActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "organizationIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "organizations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrganization",
    values: [BigNumberish, string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idSeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOrganizationActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizationIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrganization",
    data: BytesLike
  ): Result;
}

export namespace OrganizationAddedEvent {
  export type InputTuple = [
    orgId: BigNumberish,
    name: string,
    canVote: boolean
  ];
  export type OutputTuple = [orgId: bigint, name: string, canVote: boolean];
  export interface OutputObject {
    orgId: bigint;
    name: string;
    canVote: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationDeletedEvent {
  export type InputTuple = [orgId: BigNumberish];
  export type OutputTuple = [orgId: bigint];
  export interface OutputObject {
    orgId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationUpdatedEvent {
  export type InputTuple = [
    orgId: BigNumberish,
    name: string,
    canVote: boolean
  ];
  export type OutputTuple = [orgId: bigint, name: string, canVote: boolean];
  export interface OutputObject {
    orgId: bigint;
    name: string;
    canVote: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OrganizationImpl extends BaseContract {
  connect(runner?: ContractRunner | null): OrganizationImpl;
  waitForDeployment(): Promise<this>;

  interface: OrganizationImplInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addOrganization: TypedContractMethod<
    [name: string, canVote: boolean],
    [bigint],
    "nonpayable"
  >;

  admins: TypedContractMethod<[], [string], "view">;

  deleteOrganization: TypedContractMethod<
    [orgId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getOrganization: TypedContractMethod<
    [orgId: BigNumberish],
    [Organization.OrganizationDataStructOutput],
    "view"
  >;

  getOrganizations: TypedContractMethod<
    [],
    [Organization.OrganizationDataStructOutput[]],
    "view"
  >;

  idSeed: TypedContractMethod<[], [bigint], "view">;

  isOrganizationActive: TypedContractMethod<
    [orgId: BigNumberish],
    [boolean],
    "view"
  >;

  organizationIds: TypedContractMethod<[], [bigint[]], "view">;

  organizations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean] & { id: bigint; name: string; canVote: boolean }
    ],
    "view"
  >;

  updateOrganization: TypedContractMethod<
    [orgId: BigNumberish, name: string, canVote: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addOrganization"
  ): TypedContractMethod<
    [name: string, canVote: boolean],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deleteOrganization"
  ): TypedContractMethod<[orgId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOrganization"
  ): TypedContractMethod<
    [orgId: BigNumberish],
    [Organization.OrganizationDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrganizations"
  ): TypedContractMethod<
    [],
    [Organization.OrganizationDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "idSeed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isOrganizationActive"
  ): TypedContractMethod<[orgId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "organizationIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "organizations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean] & { id: bigint; name: string; canVote: boolean }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateOrganization"
  ): TypedContractMethod<
    [orgId: BigNumberish, name: string, canVote: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OrganizationAdded"
  ): TypedContractEvent<
    OrganizationAddedEvent.InputTuple,
    OrganizationAddedEvent.OutputTuple,
    OrganizationAddedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationDeleted"
  ): TypedContractEvent<
    OrganizationDeletedEvent.InputTuple,
    OrganizationDeletedEvent.OutputTuple,
    OrganizationDeletedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationUpdated"
  ): TypedContractEvent<
    OrganizationUpdatedEvent.InputTuple,
    OrganizationUpdatedEvent.OutputTuple,
    OrganizationUpdatedEvent.OutputObject
  >;

  filters: {
    "OrganizationAdded(uint256,string,bool)": TypedContractEvent<
      OrganizationAddedEvent.InputTuple,
      OrganizationAddedEvent.OutputTuple,
      OrganizationAddedEvent.OutputObject
    >;
    OrganizationAdded: TypedContractEvent<
      OrganizationAddedEvent.InputTuple,
      OrganizationAddedEvent.OutputTuple,
      OrganizationAddedEvent.OutputObject
    >;

    "OrganizationDeleted(uint256)": TypedContractEvent<
      OrganizationDeletedEvent.InputTuple,
      OrganizationDeletedEvent.OutputTuple,
      OrganizationDeletedEvent.OutputObject
    >;
    OrganizationDeleted: TypedContractEvent<
      OrganizationDeletedEvent.InputTuple,
      OrganizationDeletedEvent.OutputTuple,
      OrganizationDeletedEvent.OutputObject
    >;

    "OrganizationUpdated(uint256,string,bool)": TypedContractEvent<
      OrganizationUpdatedEvent.InputTuple,
      OrganizationUpdatedEvent.OutputTuple,
      OrganizationUpdatedEvent.OutputObject
    >;
    OrganizationUpdated: TypedContractEvent<
      OrganizationUpdatedEvent.InputTuple,
      OrganizationUpdatedEvent.OutputTuple,
      OrganizationUpdatedEvent.OutputObject
    >;
  };
}
