/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { Organization, OrganizationInterface } from "../Organization";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "IllegalState",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "InvalidArgument",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orgId",
        type: "uint256",
      },
    ],
    name: "OrganizationNotFound",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "orgId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "cnpj",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "enum Organization.OrganizationType",
        name: "orgType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "canVote",
        type: "bool",
      },
    ],
    name: "OrganizationAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "orgId",
        type: "uint256",
      },
    ],
    name: "OrganizationDeleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "orgId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "cnpj",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "enum Organization.OrganizationType",
        name: "orgType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "canVote",
        type: "bool",
      },
    ],
    name: "OrganizationUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "cnpj",
        type: "string",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "enum Organization.OrganizationType",
        name: "orgType",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "canVote",
        type: "bool",
      },
    ],
    name: "addOrganization",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orgId",
        type: "uint256",
      },
    ],
    name: "deleteOrganization",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orgId",
        type: "uint256",
      },
    ],
    name: "getOrganization",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "cnpj",
            type: "string",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "enum Organization.OrganizationType",
            name: "orgType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "canVote",
            type: "bool",
          },
        ],
        internalType: "struct Organization.OrganizationData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOrganizations",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "cnpj",
            type: "string",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "enum Organization.OrganizationType",
            name: "orgType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "canVote",
            type: "bool",
          },
        ],
        internalType: "struct Organization.OrganizationData[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orgId",
        type: "uint256",
      },
    ],
    name: "isOrganizationActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orgId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "cnpj",
        type: "string",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "enum Organization.OrganizationType",
        name: "orgType",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "canVote",
        type: "bool",
      },
    ],
    name: "updateOrganization",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class Organization__factory {
  static readonly abi = _abi;
  static createInterface(): OrganizationInterface {
    return new Interface(_abi) as OrganizationInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Organization {
    return new Contract(address, _abi, runner) as unknown as Organization;
  }
}
